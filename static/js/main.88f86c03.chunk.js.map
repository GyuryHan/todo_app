{"version":3,"sources":["List.jsx","App.js","serviceWorker.js","index.js"],"names":["List","todos","loading","todoList","map","todo","key","id","title","App","useState","setTodos","newTodo","setNewTodo","setLoading","fetchInitialData","a","fetch","response","json","initialData","useEffect","console","log","action","type","name","onChange","e","target","value","onClick","preventDefault","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAceA,G,MAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAEhBC,EAAW,2CAGf,OAFID,IAASC,EAAWF,EAAMG,KAAK,SAACC,GAAD,OAAU,wBAAIC,IAAKD,EAAKE,IAAKF,EAAKG,WAGnE,4BACGL,KC0CQM,EA/CH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTT,EADS,KACFU,EADE,OAEcD,qBAFd,mBAETE,EAFS,KAEAC,EAFA,OAGcH,oBAAS,GAHvB,mBAGTR,EAHS,KAGAY,EAHA,KAcVC,EAAgB,uCAAG,8BAAAC,EAAA,6DACvBF,GAAW,GADY,SAEAG,MAAM,4DAFN,cAEjBC,EAFiB,gBAGGA,EAASC,OAHZ,OAGjBC,EAHiB,OAIvBT,EAASS,GACTN,GAAW,GALY,2CAAH,qDAkBtB,OAVAO,qBAAW,WACTC,QAAQC,IAAI,YAAatB,KACzB,CAACA,IAGHoB,qBAAW,WACTN,MACA,IAIA,oCACA,wCAEA,0BAAMS,OAAO,IACX,2BAAOC,KAAK,OAAOC,KAAK,GAAGC,SAhCP,SAACC,GACvBf,EAAWe,EAAEC,OAAOC,UAgClB,4BAAQC,QA7BI,SAACH,GACfA,EAAEI,iBACFrB,EAAS,GAAD,mBAAKV,GAAL,CAAY,CAAC,MAASW,EAAS,GAAMX,EAAMM,GAAI,KAAQN,EAAMgC,WA2BnE,iBAEF,kBAAC,EAAD,CAAMhC,MAAOA,EAAOC,QAASA,MChCbgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.88f86c03.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst List = ({todos, loading}) => {\r\n  \r\n  let todoList = <div>loading...</div>;\r\n  if(!loading) todoList = todos.map( (todo) => <li key={todo.id}>{todo.title}</li> )\r\n\r\n  return (\r\n    <ul>\r\n      {todoList}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default List;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport List from './List.jsx';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const ChangeInputData = (e) => {\n    setNewTodo(e.target.value);\n  }\n\n  const addTodo = (e) => {\n    e.preventDefault();\n    setTodos([...todos, {'title': newTodo, 'id': todos.id, 'text': todos.text}]);\n  }\n\n  const fetchInitialData = async () => {\n    setLoading(true);\n    const response = await fetch('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n    const initialData = await response.json();\n    setTodos(initialData);\n    setLoading(false);\n  }\n\n  useEffect( () => {\n    console.log(\"rendering\", todos);\n  },[todos])\n\n  // fetch작업 할 때 useEffect에 직접 넣지 말고 함수를 넣어야 함\n  useEffect( () => {\n    fetchInitialData();\n  },[])\n \n\n  return (\n    <>\n    <h1>todo_App</h1>\n\n    <form action=\"\">\n      <input type=\"text\" name=\"\" onChange={ChangeInputData}/>\n      <button onClick={addTodo}>추가</button>\n    </form>\n    <List todos={todos} loading={loading}/>\n    </>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}